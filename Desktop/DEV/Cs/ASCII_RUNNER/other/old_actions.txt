#include "_header.h"
#include "_ascii.h"

int is_on_ground(int x, int y, char *map)
{
    if (y > map_hei || x > WIN_X_MAX)
        return (2);
    for (int i = x; i < x + 3; i++)
    {
        if ((get_at_index(i, y, map) == '-' || get_at_index(i, y, map) == '|' || get_at_index(i, y, map) == '_' || get_at_index(i, y, map) == '/' || get_at_index(i, y, map) == '\\') && get_at_index(i, y, map) != 0)
            return (1);

        else if (get_at_index(i, y + WIN_X_MAX + 1, map) == 'g')
            return (2);
    }
    return (0);
}
int is_blocked(int x, int y, int dir, char *map)
{
    int ret = 0;
    y += 3;

    if (y >= map_hei || x >= WIN_X_MAX || y == 0)
        return (2);
    for (int i = 0; i < 1; i++)
    {
        if (get_at_index(x + dir + 1, y + i, map) == '!')
            continue;
        if (get_at_index(x + dir - 2, y + i, map) == '!')
            continue;
        if ((get_at_index(x + dir, y + i, map) == '|' || get_at_index(x + dir, y + i, map) == '.' || get_at_index(x + dir, y + i, map) == '\\' || get_at_index(x + dir, y + i, map) == '/') && get_at_index(x + dir, y + i, map) != 0)
            ret += 1;
    }
    return (ret >= 1 ? 1 : 0);
}

int jmp(Grid *grid, int *input, int *last_input, int *is_using_spell, int *last_move, int mob_ind, int obst_dir, int time, int *is_jumping, int *x_pos, int *y_pos, int *x_cam_pos, int *y_cam_pos, int *res, useconds_t delay_microseconds, int wait_time, char *map)
{
    char mv = *last_move;
    int am = 0;
    int is_db_djmp = 0;
    *is_jumping = 1;
    while (am < PLR_JUMP_DURATION || !is_on_ground(*x_pos, *y_pos + 4, map))
    {
        int inp = getchar();
        *input = inp;

        if (is_spell_key(inp) && !*is_using_spell)
        {
            char *anim = draw_spell(grid, inp, last_input, is_using_spell, mv, *x_pos, *y_pos, map);
            int u = 10;
            while (u)
            {
                usleep(REF_SPEED * delay_microseconds * 120);
                *res = draw_player(grid, wait_time, *x_pos, *y_pos, *x_cam_pos, *y_cam_pos, anim, map, mob_ind, obst_dir, time++, *input);
                print_debug_log(time, 0, *input, *last_input, *last_move, *x_cam_pos, *y_cam_pos, *x_pos, *y_pos, 0, *is_using_spell, *is_jumping, 0, 0);
                u--;
            }
            *is_using_spell = 0;
        }

        if (is_move_key(inp))
            *last_move = inp;
        if (is_move_key(inp + 32))
        {
            am = PLR_JUMP_DURATION;
            return (-1);
        }
        if (*input == ' ' && am > PLR_JUMP_DURATION / 2 && !is_db_djmp)
        {
            am = -5;
            is_db_djmp = 1;
        }
        if (rand() % 2 == 0 && is_db_djmp && map[*x_pos + 3 + (WIN_X_MAX + 1) * (*y_pos + plr_ysize - 1)] == ' ')
            map[rand_range(-1, 1) + *x_pos + 3 + (WIN_X_MAX + 1) * (*y_pos + plr_ysize - 1)] = '4';
        *is_jumping = 1;

        *y_pos += am <= PLR_JUMP_DURATION - 1 ? -1 : am >= PLR_JUMP_DURATION + 1 ? 1
################################   : 0;
        *x_pos += *last_move == 'd' ? 1 : *last_move == 'a' ? -1
########################      : 0;

        if (am >= PLR_JUMP_DURATION / 2 - 2 && am <= PLR_JUMP_DURATION / 2 + 2)
            *x_pos += *last_move == 'd' ? 1 : *last_move == 'a' ? -1
########################          : 0;

        *y_cam_pos = *y_pos - 20;
        if (*y_cam_pos > 50)
            *y_cam_pos = 50;
        if (*x_pos > WIN_X_MAX - 130)
            *x_cam_pos = *x_pos - 130;
        if (*x_cam_pos > WIN_X_MAX - WIN_X_MAX)
            *x_cam_pos = WIN_X_MAX - WIN_X_MAX;
        if (*x_pos <= 1)
            *x_pos = 1;
        if (am > PLR_JUMP_DURATION / 2 && is_on_ground(*x_pos, *y_pos + 4, map))
            break;
        usleep(REF_SPEED * delay_microseconds * 60);
        *res = draw_player(grid, wait_time, *x_pos, *y_pos, *x_cam_pos, *y_cam_pos, is_db_djmp ? plr_djmp_left : *last_move == 'a' ? plr_jmp_left
################################################ : *last_move == 'd'   ? plr_jmp_right
################################################ : *last_move == 'w'   ? plr_jmp_up
########################################################     : plr_jmp_down,
########         map, mob_ind, obst_dir, time++, *input);
        print_debug_log(time, 0, *input, 0, *last_move, *x_cam_pos, *y_cam_pos, *x_pos, *y_pos, 0, 0, *is_jumping, 0, 0);
        am++;
    }
    *is_jumping = 0;
    return (time);
}

int move(Grid *grid, int *input, int *last_input, int *is_using_spell, int *last_move, int *is_shifting, int mob_ind, int obst_dir, int time, int *is_jumping, int *x_pos, int *y_pos, int *x_cam_pos, int *y_cam_pos, int *res, useconds_t delay_microseconds, int wait_time, char *map)
{
    int is_shift = is_move_key(*input + 32) ? 1 : 0;
    if (is_shift)
        *last_move = *input + 32;
    int max_am = is_move_key(*input) ? PLR_SPEED : *input == 'W' || *input == 'S' ? dash_len_ver
################################         : PLR_DASH_DURATION;
    directions direction = *input == 'W' || *input == 'w' ? up : *input == 'A' || *input == 'a' ? left
########################       : *input == 'S' || *input == 's'   ? down
########################################      : right;
    int result = 2;
    int am = 0;

    int x_displ = direction == left ? -1 : direction == right ? 1
########################        : 0;
    int y_displ = direction == up ? -1 : direction == down ? 1
########################     : 0;
    int has_jumped = 0;
    while ((am < max_am || *is_shifting))
    {
        int inp = getchar();
        int speed = 5;

        if (is_move_key(inp + 32))
            is_shift = 1;

        if ((inp != *last_move && inp != -1 && inp != ' ' && !is_move_key(inp + 32)))
        {
            *is_shifting = 0;
            am = max_am;
        }

        if (inp == ' ' || is_on_ground(*x_pos + x_displ, *y_pos + 4 + y_displ, map) == 2)
        {
            time = jmp(grid, input, last_input, is_using_spell, last_move, mob_ind, obst_dir, time, is_jumping, x_pos, y_pos, x_cam_pos, y_cam_pos, res, delay_microseconds, wait_time, map);
            if (time == -1)
                is_shift = 1;
            has_jumped = 1;
        }
        if (has_jumped)
            inp = *input;
        char *anim = *input == 'W'   ? plr_spell_up
########   : *input == 'A' ? plr_spell_left
########   : *input == 'S' ? plr_spell_down
########   : *input == 'D' ? plr_spell_right
########   : *input == 'w' ? *y_pos % 2 == 0 ? plr_mv_up1 : plr_mv_up2
########   : *input == 'a' ? *x_pos % 2 == 0 ? plr_mv_left1 : plr_mv_left2
########   : *input == 's' ? *y_pos % 2 == 0 ? plr_mv_down1 : plr_mv_down2
########   : *input == 'd' ? *x_pos % 2 == 0 ? plr_mv_right1 : plr_mv_right2
################ : plr_spell_down;
        int block_check = *input == 'D' ? 6 : -1;
        if ((direction == left) && is_blocked(*x_pos + x_displ + 2, *y_pos + y_displ, block_check, map))
            return (1);
        if ((direction == right) && is_blocked(*x_pos + plr_xsize + x_displ - 2, *y_pos + y_displ, block_check, map))
            return (1);
        if (*x_pos + x_displ < 1 || *x_pos + x_displ > WIN_X_MAX - 50 || *y_pos + y_displ > map_hei || *y_pos + y_displ < 1)
            return (1);
        if (*input == 'w' && !can_climb(*x_pos + x_displ, *y_pos + y_displ, up, map))
            return (1);
        if (*input == 's' && !can_climb(*x_pos + x_displ, *y_pos + y_displ, up, map))
            return (1);
        if (*input == 'W' && is_on_ground(*x_pos + x_displ, *y_pos + 4 + y_displ, map))
            return (1);
        if (*input == 'S' && is_on_ground(*x_pos + x_displ, *y_pos + 3 + y_displ, map))
            return (1);
        *x_pos += x_displ;
        *y_pos += y_displ;
        if (!is_shift)
        {
            if ((*input == 'd' && !is_on_ground(*x_pos - 1, *y_pos + 4, map)) || (*input == 'a' && !is_on_ground(*x_pos + 6, *y_pos + 4, map)))
                *y_pos += 1;
        }

        if (*x_pos <= 1)
            *x_pos = 1;
        if (*x_pos >= WIN_X_MAX + 150)
            *x_pos = WIN_X_MAX + 150;
        *y_cam_pos = *y_pos - 20;
        if (*y_cam_pos > 50)
            *y_cam_pos = 50;
        if (*x_pos > WIN_X_MAX - 130)
            *x_cam_pos = *x_pos - 130;

        if (*x_cam_pos > WIN_X_MAX - WIN_X_MAX)
            *x_cam_pos = WIN_X_MAX - WIN_X_MAX;

        if (is_shift)
        {
            int index = direction == 'W' ? *x_pos + plr_xsize + (WIN_X_MAX + 1) * (*y_pos + plr_ysize) : direction == 'A' ? index = *x_pos + 5 + (WIN_X_MAX + 1) * (*y_pos + plr_ysize)
########################################         : direction == 'D'   ? *x_pos + (WIN_X_MAX + 1) * (*y_pos + plr_ysize)
################################################            : *x_pos + 3 + (WIN_X_MAX + 1) * (*y_pos + plr_ysize);
            if (map[index] && map[index] == ' ')
                map[index] = '3';
            wait_time = 0;
            *is_shifting = 0;
        }
        usleep((REF_SPEED * delay_microseconds) * (!is_shift ? 60 : ((am / 5 + 1) * speed)));
        result = draw_player(grid, speed, *x_pos, *y_pos, *x_cam_pos, *y_cam_pos, anim, map, mob_ind, obst_dir, 0, *input);
        print_debug_log(time, 0, *input, 0, *last_move, *x_cam_pos, *y_cam_pos, *x_pos, *y_pos, 0, 0, *is_jumping, *is_shifting, 0);
        if (has_jumped)
        {
            *input = *last_move;
            has_jumped = !has_jumped;
        }
        am++;
    }
    return (result);
}

char *draw_spell(Grid *grid, char input, int *last_input, int *is_using_spell, char last_move, int x_pos, int y_pos, char *map)
{
    grid->mun++;
    *last_input = input;
    if (input == 'k' || input == 'K')
    {
        int Sky_ct_pos = (WIN_X_MAX + 1) * (SKY_X + 14) + x_pos + SPELL_DIST;
        if (Sky_ct_pos < 0)
            Sky_ct_pos = x_pos;
        *is_using_spell += SPELL_CD;
        if (last_move == mv_right)
            map[Sky_ct_pos] = 'f';
        else if (last_move == mv_left && Sky_ct_pos - (SPELL_DIST * 2) > 0)
            map[Sky_ct_pos - (SPELL_DIST * 2)] = 'f';
        else if (last_move == mv_up || last_move == mv_down)
            map[Sky_ct_pos - (SPELL_DIST)] = 'f';
        if (input == 'K')
        {
            for (int x = -4; x < 9; x++)
            {
                int displ = 2;
                int index = Sky_ct_pos - (displ * x);
                if (map[index] && map[index] == ' ')
########  map[index] = 'f';
            }
        }
    }
    else if (input == 'f' || input == 'F')
    {
        *is_using_spell += SPELL_CD;
        int index = 0;
        if (last_move == mv_right)
            index = (WIN_X_MAX + 1) * (y_pos + 2) + x_pos + 10;
        else if (last_move == mv_left)
            index = (WIN_X_MAX + 1) * (y_pos + 2) + x_pos - 6;
        else if (last_move == mv_up)
            index = (WIN_X_MAX + 1) * (y_pos - 2) + x_pos;
        if (map[index])
            map[index] = 'x';
        if (map[index + 3 - WIN_X_MAX - 1])
            map[index + 3 - WIN_X_MAX - 1] = 'x';
        if (input == 'F')
        {
            int displ = 8;

            for (int x = 1; x < 15; x++)
            {
                displ--;
                int ind = index + (x * displ) - WIN_X_MAX * x;
                if (last_move == 'a')
########  ind = index - (x * displ) - WIN_X_MAX * x;
                if (map[ind] && map[ind] == ' ')
########  map[ind] = 'x';
            }
        }
    }
    else if (input == 't' || input == 'T')
    {
        *is_using_spell += SPELL_CD;
        int index = 0;
        if (last_move == mv_right)
            index = (WIN_X_MAX + 1) * (y_pos + 2) + x_pos + 8;
        else if (last_move == mv_left)
            index = (WIN_X_MAX + 1) * (y_pos + 2) + x_pos - 6;
        else if (last_move == mv_up)
            index = (WIN_X_MAX + 1) * (y_pos - 2) + x_pos;
        if (map[index])
            map[index] = last_move == mv_right ? '>' : last_move == mv_left ? '<'
################################    : '^';
    }

    return (last_move == mv_left ? plr_spell_left : last_move == mv_right ? plr_spell_right
################################  : plr_spell_up);
}

int is_spell_key(char key)
{
    char good_cars[] = {FIRE_K, THUND_K, WATER_K, SHOT_K, '\0'};
    int i = 0;
    while (good_cars[i])
    {
        if (key == good_cars[i] || key + 32 == good_cars[i])
            return (1);
        i++;
    }
    return (0);
}
int is_move_key(char key)
{
    if (key == mv_down || key == mv_left || key == mv_right || key == mv_up || key == crouch)
        return (1);
    return (0);
}

int can_climb(int x_pos, int y_pos, directions dir, char *map)
{
    if (dir == up)
        return (is_on_ground(x_pos, y_pos + 3, map));
    else if (dir == down)
        return (is_on_ground(x_pos, y_pos + 5, map));
    else
        return (0);
}
void reset_text_indexes(Grid *grid)
{
    int i = 0;
    while (grid->cells[i].text != NULL)
        grid->cells[i++].buff_index = 0;
}

void print_colored_text(char *text, char *color)
{
    if (color != NULL)
    {
        int i = 0;
        while (text[i])
        {
            printf("%s%c\033[0m", color, text[i]);
            i++;
        }
    }
    else
        printf("%s", text);
}
int draw_player(Grid *grid, Game *game)
{
	system("clear");
	reset_text_indexes(grid);

	char *msg1 = _msg;
	char *msg2 = _msg2;
	int msg_index = 0;
	int msg2_index = 0;
	int i = 0;
	int res = 1;

	char *map = grid->txt;

	// if (ref_time % 2 == 0)
	//	update_grid(grid, ref_time);

	int y_cam_pos = game->y_cam;
	int x_cam_pos = game->x_cam;
	int time = game->time;
	int plr_x = grid->plrc->x_pos;
	int plr_y = grid->plrc->y_pos;

	i += (WIN_X_MAX + 1) * game->y_cam;

	for (int y = y_cam_pos; y < WIN_Y_MAX + y_cam_pos; y++)
	{
		i += x_cam_pos;
		int xx = 0;
		for (int x = x_cam_pos; x < WIN_X_MAX + x_cam_pos; x++)
		{
			if (x - x_cam_pos > WIN_X_MAX)
				break;

			if (y > map_hei - 3 && time % 5 == 0)
			{
				if (map[i + 1] == '~')
				{
					if (map[i] == ' ')
					{
						map[i] = '~';
						map[i + 1] = ' ';
					}
					else if (map[i] == '|')
					{
						int j = 0;
						while (map[i + 1 + j] != '|')
							j++;
						map[i + 1] = ' ';
						map[i + j - 1] = '~';
					}
				}
			}

			// HANDLE
			int j = 0;
			int v = 0;
			while (j - v < 30)
			{
				int b_i = grid->cells[j].buff_index;
				Cell *c = &grid->cells[j];
				if (c->st == env)
				{
					j++;
					v++;
					continue;
				}
				if ((x - xx >= c->x_pos && x - xx < c->x_pos + c->width / 2) && (y >= c->y_pos && y <= c->y_pos + c->height) && c->text[b_i])
				{
					while (c->text[b_i] && c->text[b_i] != '\n')
					{
						if (c->text[b_i] == '#')
							printf(" ");
						else if (c->text[b_i] == ' ')
							printf("%c", map[i]);
						else
							printf("%c", c->text[b_i]);
						i++;
						x++;
						b_i++;
						c->buff_index++;
						x++;
						xx++;
					}
					c->buff_index++;
					b_i++;
				}
				j++;
			}
			if (y == GROUND_X - 14 && (x == 92 || x == 93))
			{
				if (plr_y <= GROUND_X - 20 && plr_x < 70)
				{
					if (x == 92)
					{
						printf(" ");
						x++;
						i++;
						continue;
					}
					else
					{
						printf(".");
						x++;
						i++;
						continue;
					}
				}
			}
			if (game->input == 'l')
			{
				if (x == 40 && y >= PLR_Sky_cT_Y - 5 && msg1[msg_index] && plr_x >= 45 && plr_x <= 55)
				{
					while (msg1[msg_index] && msg1[msg_index] != '\n')
					{
						printf("%c", msg1[msg_index++]);
						i++;
						x++;
						if (x >= WIN_X_MAX + x_cam_pos - 1)
							break;
					}
					if (x >= WIN_X_MAX + x_cam_pos - 1)
						break;
					msg_index++;
				}
				else if (x == 80 && y >= GROUND_X - 21 && plr_x > 70 && plr_x < 90 && msg2[msg2_index])
				{
					while (msg2[msg2_index] && msg2[msg2_index] != '\n')
					{
						printf("%c", msg2[msg2_index++]);
						i++;
						x++;
						if (x >= WIN_X_MAX + x_cam_pos - 1)
							break;
					}
					if (x >= WIN_X_MAX + x_cam_pos - 1)
						break;
					msg2_index++;
				}
			}
			if (map[i] == 'f' && map[i - 1] != '\n')
			{
				map[i] = ' ';
				if (x > 1 && x < WIN_X_MAX)
				{
					int dir[] = {
						i + WIN_X_MAX + 1,
						i + WIN_X_MAX,
						i + WIN_X_MAX + 2,
					};
					char d_c[] = {
						'|',
						'/',
						'\\',
					};
					int r = rand() % sizeof(dir) / sizeof(int);

					int rr = rand() % 500;

					if (rr == 0)
					{
						int ru = r + 1 > 2 ? r - 1 : r + 1;
						if (map[dir[ru] - WIN_X_MAX * 3] && map[dir[ru] - (WIN_X_MAX * 3)] == ' ')
							map[dir[ru] - (WIN_X_MAX * 3)] = 'f';
					}
					if (map[dir[r]] && map[dir[r]] == ' ')
					{
						char c[2];
						int nxt_ind = rand() % thunder_len == 0 ? i : dir[r];
						c[0] = nxt_ind == i ? '.' : d_c[r];
						c[1] = '\0';
						print_colored_text(c, YELLOW);
						if (map[nxt_ind] == ' ')
							map[nxt_ind] = 'f';
						i++;
						x++;
					}
					else if (map[dir[r] + 1] && map[dir[r] + 1] == ' ')
					{
						char c[2];
						int nxt_ind = rand() % thunder_len == 0 ? i : dir[r] + 1;
						c[0] = nxt_ind == i ? '.' : d_c[r];
						c[1] = '\0';
						print_colored_text(c, YELLOW);
						if (map[nxt_ind] == ' ')
							map[nxt_ind] = 'f';
						i++;
						x++;
					}
					else if (dir[r])
						map[i] = 'x';
				}
			}
			else if (map[i] == 'x')
			{
				for (int xx = i - 1 - WIN_X_MAX - 1; xx < i - 1 + 3 - WIN_X_MAX - 1; xx++)
				{
					for (int ii = -1; ii < 2; ii++)
					{
						if (map[xx + ((WIN_X_MAX + 1) * ii)] && map[xx + ((WIN_X_MAX + 1) * ii)] == ' ')
							map[xx + ((WIN_X_MAX + 1) * ii)] = 's';
					}
				}
				print_colored_text("*", RED);
				map[i] = ' ';
				i++;
				x++;
			}
			if (map[i] == 's')
			{
				print_colored_text("*", RED);
				map[i] = ' ';
				i++;
				x++;
			}
			if (((has_SNOW_IC || has_RAIN_IC) && map[i + 1] == ' ' && rand() % MET_FREQ == 0) && ((x == WIN_X_MAX + x_cam_pos - 4 && rand() % MET_FREQ == 0 && y < GROUND_X - 10) || (x >= 2 && x < WIN_X_MAX + x_cam_pos - 3 && y == SKY_X + 13)))
				map[i + 1] = has_SNOW_IC ? SNOW_IC : RAIN_IC;
			if (has_STAR_IC && (((y <= SKY_X - 3 || y >= SKY_X + 14) && y < GROUND_X - 10) && map[i] == ' ') && rand() % (MET_FREQ * 1000) == 0)
			{
				map[i] = STAR_IC;
				printf(".");
				i++;
				x++;
			}

			if (map[i] == SNOW_IC || map[i] == RAIN_IC || map[i] == STAR_IC)
			{
				if (map[i] == STAR_IC)
				{

					char txt[2];
					txt[0] = STAR_IC;
					txt[1] = '\0';
					if (rand() % 200 == 0)
					{
						map[i] = ' ';
						printf(".");
					}
					else
						print_colored_text(txt, ORANGE);
					i++;
					x++;
				}
				else
				{
					int ind = i + (WIN_X_MAX + (WIND_DIR + 1));
					if (map[ind] == ' ' || map[ind] == STAR_IC)
					{
						map[ind] = (map[i] == SNOW_IC ? 'S' : 'R');
						map[i] = ' ';

						if (thunder_freq > 0)
						{
							int r = rand() % thunder_freq;
							if (y <= SKY_X && r == 0 && i > 1 && map[i + 1] == ' ')
								map[i + 1] = 'f';
						}
					}
					else
						map[i] = ' ';
				}
			}
			if (map[i] == 'S' || map[i] == 'R')
			{
				char c = (map[i] == 'S' ? SNOW_IC : RAIN_IC);
				int try = 1;
				while (try < 6)
				{
					if (map[i + 1] == ' ')
					{
						if (y == plr_x && x + 1 >= plr_x && x + 1 <= plr_x + plr_xsize - 1)
							break;
						char cc[2];
						cc[0] = c;
						cc[1] = '\0';
						print_colored_text(cc, BLUE);
						map[i] = c;
						i++;
						x++;
						break;
					}
					try++;
				}
				if (try == 6)
					map[i] = ' ';
			}

			if (!map[i])
				break;
			if (map[i] != '\n' && map[i])
			{
				char c[2];
				c[0] = map[i];
				c[1] = '\0';

				if (map[i] > '0' && map[i] <= '9')
				{
					char *c = "~\0";
					map[i]--;
					print_colored_text(c, map[i] <= '3' ? RED : YELLOW);
					i++;
					x++;
					xx++;
					continue;
				}
				else if (map[i] == '0')
				{
					char *c = "*\0";
					map[i] = ' ';
					print_colored_text(c, YELLOW);
					i++;
					x++;
					continue;
				}
				else if (c[0] == '!')
					printf(" ");
				else if ((map[i] == '~' || map[i] == '_') && y >= GROUND_X + 5)
					print_colored_text(c, BLUE);
				else if (y >= GROUND_X && map[i] == '/')
					print_colored_text(c, GREEN);
				else
					printf("%c", map[i]);
			}
			i++;
		}
		printf("\n");
		while (map[i] != '\n')
			i++;
		i++;
	}

	return (res);
}